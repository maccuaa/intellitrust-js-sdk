{
  "swagger": "2.0",
  "info": {
    "description": "# IntelliTrust API documentation\nThis document describes how to control access to your application using IntelliTrust Authentication API calls.\n# Prerequisites\nConfirm the following before configuring your application to use the API calls included in this guide:\n\n 1. An Authentication API application has been created within IntelliTrust.\n 2. A resource rule has been created for your Authentication API application.\n 3. Each user who will access the application has an IntelliTrust account.\n 4. Each user who will access the IntelliTrust application has had all of their authenticators assigned to them and activated.\n\n# IntelliTrust Authentication APIs\nIntelliTrust uses three API calls to complete an authentication challenge:\n\n 1. Get User's Authenticators\n 2. Select Authenticator\n 3. Complete Authentication Challenge\n\nThese API calls must be made sequentially to complete IntelliTrust authentication. Information is provided in response to each API call that is required to complete the next call. Completing each of these API calls in order allows users to log in to the application.\n\n# List of supported Authenticators\nThe following authenticators are supported for authentication using IntelliTrust API calls:\n\n - Passwords\n - Knowledge-based authentication (KBA)\n - Temporary Access Codes\n - One-time passcodes (OTP)\n\t-\tOTPs can also be dynamically linked with transaction details when used with Authentication API applications for PSD2 (Payment Service Directive).\n - Grid cards\n - Hardware and software tokens\n\t-\tTokens supporting signatures can also be dynamically linked with transaction detail values when used with Authentication API applications for PSD2.\n - Entrust Soft Token Push authentication\n - Mobile Smart Credential Push authentication\n\n Although FIDO2 authentication is supported by IntelliTrust for authentication to SAML and OIDC applications as well as to the user and administration portals, it is not yet supported in the authentication API.\n\nThe next section describes how to authenticate through API calls using some of the authenticators listed above. These examples involve single-factor authentication. See **Two-factor Authentication** for assistance with using IntelliTrust's Authentication APIs to facilitate two-factor authentication.\n\n## Transaction Details\nWhen using a push authenticator, such as Entrust Soft Token Push authentication or Mobile Smart Credential Push authentication, transaction details may be included in the challenge request. A transaction detail consists of a detail name and a value. Transaction details are passed to the mobile device and displayed to the user when confirming authentication.\n\nWhen using an OTP authenticator with Authentication API applications for PSD2, the OTP is dynamically linked with transaction details. The transaction details are included in the challenge request. A transaction detail consists of a detail name and a value. IntelliTrust generates a new, specific OTP tied directly to the request and transaction details. The OTP is then sent to the user using Email or SMS messaging. The user reviews the transaction details and uses the associated OTP to complete the authentication challenge.\n\nWhen using a TOKEN authenticator with Authentication API applications for PSD2, the token response is dynamically linked with transaction detail values. The transaction details are included in the challenge request. A transaction detail consists of a detail name and a value. The user reviews the transaction details and enters the transaction values (consecutively) into the token and obtains the signature. The signature is then used to complete the authentication challenge.\n\nThe following restrictions apply to transaction details:\n\n - The detail name cannot be duplicated.\n - The length of the detail name and value cannot exceed 255 characters.\n - The number of transaction details cannot exceed 25.\n\nWhen dynamically linking transaction details with Authentication API applications that use an OTP authenticator or TOKEN authenticator for PSD2, the same transaction details must be specified in both the user challenge (Select authenticator) request and the user authenticate (Complete authentication challenge) request. They must match.\n\nWhen using transaction details with push authentication as part of the user challenge (Select authenticator) request, the use of the same transaction details can be optionally specified in the user authenticate (Complete authentication challenge) request. If specified, they must match.\n\nWhen using the transaction details, it is recommended that the transaction details are always supplied in both the user challenge (Select authenticator) request and the user authenticate (Complete authentication challenge) request. This is mandatory for PSD2 authentications.\n\nTo use transaction details with a push authenticator or an OTP authenticator API applications for PSD2, the request user challenge body should contain a JSON object with an array of these details. For example:\n```\n\"transactionDetails\":[\n\t{\"detail\":\"Account\",\"value\":\"67432\"},\n\t{\"detail\":\"Amount\",\"value\":\"$10,001\"},\n\t{\"detail\":\"Purpose\",\"value\":\"Transfer\"}\n],\n```\n\nTo use transaction details with a TOKEN authenticator API applications for PSD2, the request user challenge body should contain a JSON object with an array of these details. Some tokens may only support numeric transaction values. For example:\n```\n\"transactionDetails\":[\n\t{\"detail\":\"Account\",\"value\":\"67432\"},\n\t{\"detail\":\"Amount\",\"value\":\"10001\"}\n],\n```\n# Examples\n## OTP\n### Get User's Authenticators\nThe first step is to submit a POST request to get all of the authenticators that can be used to log in to the application. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users\n```\nThe body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the application being accessed. For example:\n```\n{\"userId\":\"jsmith\",\"applicationId\":\"1111111-111111-111111-11111111\"}\n```\nAn API response is received after entering the request. For example:\n```\n {\n        \"availableSecondFactor\": null,\n        \"userMachineSettings\": {\n            \"machineAuthenticatorEnabled\": true,\n            \"deviceFingerprintRequired\": false,\n            \"attributeExclusions\": [],\n            \"userMachineAuthenticators\": []\n        },\n        \"machineAuthenticator\": null,\n        \"authenticationTypes\": [\n            \"OTP\",\n            \"TOKEN\"\n        ],\n        \"time\": 1520961989641,\n        \"otpDeliveryInfo\": {\n            \"otpDefaultDelivery\": \"SMS\",\n            \"availableOTPDelivery\": [\n                \"SMS\",\n                \"EMAIL\",\n                \"VOICE\"\n            ]\n        }\n  }\n```\nThe authenticator types listed in the response are those that can be used to complete an authentication challenge and log in. **authenticationTypes** lists all of the authenticators that have been assigned to the user and can be used to complete a first-factor authentication challenge. **availableSecondFactor** lists the authenticators that can be used to complete a second authentication challenge after the user has completed a first-factor challenge. The authenticators listed as **authenticationTypes** and **availableSecondFactor** are defined by cross referencing the authenticators assigned to the user with those the applicationâ€™s resource rule allows to be used for authentication.\n### Select Authenticator\nThe next step is to select which authenticator to use from those listed in the previous API response. The authenticator is selected by entering a POST request. That request must be sent to the correct URL with the name of authenticator at the end. The URL is different for each authenticator that you want to select using the API call. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users/authenticate/OTP\n```\nThe body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the application being accessed. For example:\n```\n{\"userId\":\"jsmith\",\"applicationId\":\"1111111-111111-111111-11111111\"}\n```\nAn API response is received after entering the request. For example:\n```\n {\n    \"status\": null,\n    \"firstName\": null,\n    \"lastName\": null,\n    \"authenticationCompleted\": false,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": false,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"kbaChallenge\": null,\n    \"token\": \"GCFi6gQPNM7eMZ3AQ7vboW8d5vL6x7vtO8tn4yAYNOpV5UYI2Xo5MZg0zYE7m/R1U1cCFm83ocC1KZ3PJbeD9zqZvPQSvxxt1KIbtD9DERd21oAVEbnqqj9/8DYUBQQoxBRfwVINlCpVt8X0ZaDMSka53ZIO9VifLwS2gjy7KNRCD9DLcDznasaYoGB2YSvj+w4bE3Z9j0bgtYmhy9swn8wmd6QMSP4eb9mH2KcqgXzCUPxTxeTZu0EkIToXD1LN8v9BCyScdCLNJ/DjOGwfmpnT4hveKX5qe/dHjgsCME5kjmHtWKlmS0SPMMMgRyNII0nCcKMZI1Khd60ubnnVoFcAUpFWG1vGJwhN6ipiuwie+EW4wAXSE1HicHhY1Q/jUQev3PvVBi+GzSKowDIorhVzApd1WP0a4686yQEMGWRdqDRltXHw7udKU8UqN5tCqUK6bZsX7x2NxabqJmmxUFBbNncuzPMPJrPNMVQtw0z8BlWCyRqYl64BZAIMTpf8F/uFPLrOHgpaV1yEiMuQBea2Hf9LyXX5Dv2L44LvABIyPZ7Jy7paeffJ7ozfLwS2VpSnjTD/1ir+p6lMYjlcfJ7l5gEoW/dS8w==\",\n    \"otpdeliveryType\": \"SMS\",\n    \"expires\": 1520966778923,\n    \"time\": 1520965879202\n}\n```\nOnce an authentication type is selected through the API call, IntelliTrust also provides the information necessary to complete the authentication challenge. For example, if OTP is selected, IntelliTrust generates an OTP and sends it to the user so they can complete the authentication challenge. If **kbaChallenge** is selected, IntelliTrust generates the questions that must be answered to authenticate.\n### Complete authentication challenge\nThe last step is to complete the authentication process. The response for the requested authentication must be included in the last API call. For example, a POST request for OTP would be sent to:\n```\nhttps://customer.region.trustedauth.com/api/web/v1/authentication/users/authenticate/OTP/complete\n```\nThe request must include the end userâ€™s response to the authentication challenge. For example, the OTP received by the user must be included in the request to complete an OTP challenge.\nThe URL must contain the selected authenticator (for example, OTP). An Authorization header field must be added in the header section of this request. The Authorization header stores the value received as \"token\" in the last request.\n\nThe body of this request should contain the Application ID and authenticator response. For example:\n```\n{\n   \"applicationId\":\"1111111-111111-111111-11111111\",\n   \"response\":\"123454665\"\n}  \n```\nAn API response is received after entering the request. For example:\n```\n{\n    \"status\": null,\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"authenticationCompleted\": true,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": null,\n    \"kbaChallenge\": null,\n    \"token\": \"GNVGALEyZRj9xQnp4+cRoQ3DrMViO+wdXMyeBdG4+63V0O1+B5eBl83HVbOW7daHMf4xPzuJ/TD5j3w5zrIKE6RObuzIfyELpEWlr+JAzuXHCQocmFa1eNz2B2VshyZl3tbes9P3P6pniXZgpG0MdbEALfDm9PydJ4hcqcqDM1XsTcxSBnv+LFWV1HFKzL018Af17iJpnz8VBzOi/x5N8enkZ5g+XO/uXNCiBqDdfMkxkDzkreDXOoiGo7KPEzsuXFQLIigwnYLC2BufWaOnP2KLYGjjH7A2O+tyKsepVREKRTMDcdkcfqJsyJKm3xWl/HW1SCg2Ql2naQ6V4fK6IjrCQqZbPSQV4GL75NB1wqTf3e6ijCJwBJH9JXIov9E8Tw66sKy7dQAlODuLQ9LwhNv6BF+Ndy6HJlCDQjD0Oket4Sp8t0HDe0mTU5FnMc/ch3zuFtVHdGarjPtnt6PIZdUFn1A585q4GeY8nJwyMFu8MpRJyM81sdDe5/nEarDtPPXp3NbY+0kl4fIozogosyHzNstPcZV4rza3XQXB6047lKqs0uUeigwo2TkbKVPHxwleIxcs9d+wpQAZHhfP3IDTwa2Qq7J9PYMEfQsnz3dIFOZdNbDnusYHvp+5LppVWvky4vX5QV5ldAc2B4t+RCvtSvIABVCR+nftzLUcSm02fKU=\",\n    \"otpdeliveryType\": null,\n    \"expires\": 1520968457173,\n    \"time\": 1520967582294\n}\n```\nIntelliTrust receives the request once it is entered and validates it.\n\nIn the example above, **authenticationCompleted** is marked as true because the response sent in the post request was valid.\n\nThe response from the call would indicate a failure if an invalid value is passed in the body of the response. For example:\n```\n{\n    \"errorCode\": \"invalid_user_response\",\n    \"errorMessage\": \"\",\n    \"parameters\": null\n}\n```\n## TOKENPUSH\n### Get users authenticators\nThe first step is to submit a POST request to get all of the authenticators that can be used to log in to your application. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users\n```\nThe body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the application being accessed. For example:\n```\n{\"userId\":\"jsmith\",\"applicationId\":\"1111111-111111-111111-11111111\"}\n```\nAn API response is received after entering the response. For example:\n```\n{\n    \"availableSecondFactor\": null,\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": true,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"machineAuthenticator\": null,\n    \"authenticationTypes\": [\n        \"TOKENPUSH\",\n        \"TOKEN\",\n        \"OTP\"\n    ],\n    \"time\": 1521485688570,\n    \"otpDeliveryInfo\": {\n        \"otpDefaultDelivery\": \"SMS\",\n        \"availableOTPDelivery\": [\n            \"SMS\",\n            \"EMAIL\",\n            \"VOICE\"\n        ]\n    }\n}\n```\nTOKENPUSH is listed as one of the user's available authenticators (**authenticationTypes**) in the example above.\n\n### Select Authenticator\n\nThe next step is to send a POST request to use token push authentication. Send the request to a URL with TOKENPUSH at the end. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users/authenticate/TOKENPUSH\n```\nThe body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the application being accessed. The body of this request may also include transaction details, as described above. For example:\n```\n{\n    \"userId\":\"jsmith\",\n    \"applicationId\":\"1111111-111111-111111-11111111\",\n    \"transactionDetails\":[\n\t    {\"detail\":\"Amount\",\"value\":\"$10,001\"},\n    \t{\"detail\":\"Purpose\",\"value\":\"Transfer\"}\n    ],\n}\n```\nAn API response is received after entering the request. For example:\n```\n{\n    \"status\": null,\n    \"firstName\": null,\n    \"lastName\": null,\n    \"authenticationCompleted\": false,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": true,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"kbaChallenge\": null,\n    \"token\": \"GHldL54iaM9Rn4I4TZ85BzYJVsvxn0sWZxWdUZfFWZxzAawEvJDd4tC9frfvxy6hV7BJDsg2GN3mbxzezsN+AT5tKlX8mPhoWrcUyGYawVxZsbvfmsVesAzNey9RPXyfOvuWqh6BDkpqrL68E1ik+dN50aFK88G4DWxQJ5+oYn0bnarJlLyr4hH62XBCMOmr1T2dTe2SFm+Brj8NI6wKdCnptWAG8QguAlVnXOVntBCzQ/XMFs6ktEnbeCIqXgsUIc2zVd7iXpNMjX5Cl3pgqozCY7UKHFW9WGxFcRz/5+1Y4DuAEGk6VygrdMLV2Hi0UaFN280JQY2jzC1eb6089JOtcm2Rnqi+Zg6OYbzscQfp+o2ARj8IlltQOIgjueiCG5X/AdIbEqc5/nFhbg/d+wNV9M6Fk2bX25iTa6mcIMp2Gvo2mhM8q0ysqzAnXjgveaikymJIx01/q0ctKNCHNN8pgXMF4sNU+GRm2vqdQXcbuTc0krALqtF40QN97JdoBSACUMN4M7gYzFC2SBsArIZwmXAqgCDvzWYq9FhUekgrIr18Bxl7yUFRJLDU\",\n    \"otpdeliveryType\": null,\n    \"expires\": 1521484056513,\n    \"time\": 1521483156531\n}\n```\n### Complete Authentication challenge\nThe user receives a push notification to the device registered with the Entrust Soft Token mobile application. The last step is to complete the authentication process using the token push authenticator. Note that in the push authentication case, there is no response that must be passed to the last API call. The post request should be sent to this API call:\n```\nhttps://customer.region.trustedauth.com/api/web/v1/authentication/users/authenticate/TOKENPUSH/complete\n```\nAs in the first example, this request will also include an Authorization header field.\n\nThe body of this request should contain a JSON object with the ID of the application being accessed. For example:\n```\n{\"applicationId\":\"1111111-111111-111111-11111111\"}\n```\nAn API response to the request is received. The response will vary depending on whether the user has completed the push authentication challenge or not. For example, if the user has not yet processed the request, the API response appears as shown:\n```\n{\n    \"status\": \"NO_RESPONSE\",\n    \"firstName\": null,\n    \"lastName\": null,\n    \"authenticationCompleted\": false,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": null,\n    \"kbaChallenge\": null,\n    \"token\": null,\n    \"otpdeliveryType\": null,\n    \"expires\": 0,\n    \"time\": 1521485352309\n}\n```\nIf the user selected a **Confirm** response for the push request, the API response appears as shown:\n```\n{\n    \"status\": \"CONFIRM\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"authenticationCompleted\": true,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": null,\n    \"kbaChallenge\": null,\n    \"token\": \"GFu9JJTpgxlAgudDrdm49fxU/sCVVf41jyxM97GDMdHhrqjSwM23bGZt2JBdCWJ/hgo0cq1DN7DYfM74+Xd/EYpMt+Ijn8iWQY2fOohCQLtC4wTJAWkQ2D5iKNGNli3iazbt65mpkqZ7Z5V5krsS1REKLES54jpDjqO4y6a+d8N9SPD8OfQx71cCGf58iDPHm96My2WH/cqvfg0Nl+8NKgtmzpLiG9HayE7KwGqOPlpsQoxuk9Mt6q8z5GL+uZ4zBV8h07KmhWxmFloaJEdJYIqQQbPHrgIZdXNHceGsJjSctkm/68Ib5ZHrtEW/IzHmMDPjau93xP9KB363TTudpO37LlprDBWvjdu+YgkN2ofUO0wsS9aVW9zu/u5LgLLk8WqpX+sS3pWD7naxqpTF0l8+hV7UknTx9n7GEIWlSZnz+5cTJe/qw9n5MXgZMkYhv6aaScKdx+gPlKFqWW7t+8xrvCBX5jybi7qknYsJxjsDnJ9xbfd5AsdE7jdZLkGIrbuh4LeJekz4S3UkC23++9jx99d+OHw9DZjSDAIYx5bApkhPje8wXRwCfHOGq/YuasmwH0lOdOmKVJs51EUbolHfSqVsIXR3SQZqCkVA82yMdYSiY/3Z65mA5EMeyyd0YNXfMGO8nw==\",\n    \"otpdeliveryType\": null,\n    \"expires\": 1521486237824,\n    \"time\": 1521485466748\n}\n```\nIf the user selected a **Cancel** response for the push request, the API response appears as shown:\n```\n{\n    \"errorCode\": \"no_transaction\",\n    \"errorMessage\": \"\",\n    \"parameters\": null\n}\n```\n## Two-factor Authentication\nTwo-factor authentication supports logging in by completing two-authentication challenges instead of one. This section describes how to use IntelliTrust's Authentication APIs to complete two-factor authentication. The API calls required are similar to those required for single-factor authentication:\n\n 1. Get User's Authenticators\n 2. Select Authenticator (First-factor)\n 3. Complete Authentication Challenge (First-factor)\n 4. Select Authenticator (Second-factor)\n 5. Complete Authentication Challenge (Second-factor)\n\n### Get User's Authenticators\n\nThe first step is to submit a POST request to get all of the authenticators that can be used. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users\n```\nThe body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the application being accessed. For example:\n```\n{\"userId\":\"jsmith\",\"applicationId\":\"1111111-111111-111111-11111111\"}\n```\nAn API response to the request is received. The response would include **authenticationTypes** marked as **PASSWORD_AND_SECONDFACTOR**. It would also include the section **availableSecondFactor**, showing all the authenticators that can be used for second-factor authentication. For example:\n```\n{\n    \"availableSecondFactor\": [\n        \"TOKENPUSH\",\n        \"TOKEN\",\n        \"OTP\"\n    ],\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": true,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"machineAuthenticator\": null,\n    \"authenticationTypes\": [\n        \"PASSWORD_AND_SECONDFACTOR\"\n    ],\n    \"time\": 1521647783740,\n    \"otpDeliveryInfo\": {\n        \"otpDefaultDelivery\": \"SMS\",\n        \"availableOTPDelivery\": [\n            \"SMS\",\n            \"EMAIL\",\n            \"VOICE\"\n        ]\n    }\n}\n```\n### Select Authenticator (First-factor)\nThe next step is to send a POST request to use first-factor authentication. It must be sent to a URL with PASSWORD_AND_SECONDFACTOR at the end of it. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users/authenticate/PASSWORD_AND_SECONDFACTOR\n```\nThe body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the application being accessed. For example:\n```\n{\"userId\":\"jsmith\",\"applicationId\":\"1111111-111111-111111-11111111\"}\n```\nAn API response is received after entering the request. For example:\n```\n{\n    \"status\": null,\n    \"firstName\": null,\n    \"lastName\": null,\n    \"authenticationCompleted\": false,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": false,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"kbaChallenge\": null,\n    \"token\": \"GC/qKOp/15eRQ8QnJ8DXA+RCtlXYxuAEyC5mF9WxT4byFl6EQYlPUUIaMMnbEq3+vQ3EGi4Mcp/sX3ttDdRzU6GMdjPHL21i9tNAw22fNE+ZsUtwoPzhCO6b5YRKQcJ9jJBADp+2o05oF/iQFaWeOnP6E1cW6zPAD4DYXwwbXe6pR46/XN6XDrR+C5JiCklwlY2Pf3L5fAG4Bl0QCEmEjeTpLCp7wbWsRv45RNgBE8O2MTLoRigzxMRen6+Hw94E2SD2EHvf4+IetJAsTFgfnx1YMabuHfrw5D0jlN0veaHmxp0yF0iitMkyNWPwoNEh+XltvVKYDas3Q9V16Xk5/rMKWgOYHp/Z/U8pf6heUgA6yeLo5dXIqC+TkSpibRpere/gBkVAskjePYs60BIpMiqiXAisKaIi4t3D50/X/6JXNvoinL60XHu+I97DrCQ20ozhn7aG1jHRNIGYFU+JDR9+qAOhmUQbZVQV9Ngqg7Av4jBDkBWAquA/E6zhZe4vDQo7WV0=\",\n    \"expires\": 1521648764763,\n    \"otpdeliveryType\": null,\n    \"time\": 1521647864782\n}\n```\n### Complete authentication challenge (First-factor)\nThe next step is to complete the first-factor authentication challenge. For an example, a POST request to complete a Password authentication challenge would be sent to the following URL:\n```\nhttps://customer.region.trustedauth.com/api/web/v1/authentication/users/authenticate/PASSWORD_AND_SECONDFACTOR/complete\n```\nAs in the first example, this request will also include an Authorization header field.\n\nThe body of this request should contain a JSON object with the password response and the ID of the application being accessed. For example:\n```\n{\"applicationId\":\"1111111-111111-111111-11111111\",\"response\":\"password\"\n}\n```\nThe response received from this request would include a new token and a field **authenticationCompleted** that would be marked as false. For example:\n```\n{\n    \"status\": null,\n    \"firstName\": null,\n    \"lastName\": null,\n    \"authenticationCompleted\": false,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": true,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"kbaChallenge\": null,\n    \"token\": \"GO7mOyRuLzfTOXLk/IbzsDEuw8cFQspxz8TCWRwcrrhtoBw/o7udXt94eTkbkDFcbMVpfqHZJcJ4vavS4MEN6wp0d7MFhd0n9A9XymY5KHKyMvrqJlqh8+NrIZjkiA0sZvrAhu+6IRGfTYfoe/DwWclJi2JNNxpMX/17b7QHZdrj5ItbJUp3wHhAswUX02uWn/Fxwnt3cxGVHgmtTaVfz42JBkiIeRcOiv81iJqfTuSrd+S29RqO4PCKYGw1pKhymottvV3eVGNxdPvwSrLgXusfuCyfAB8tGl047WJQOKaHZ7k4GbzC1QKjldNWHrMAtiLUMWaxgvpU/vANJUibIPXJ6+1i7X7U6THJJg4fBG+pJo8jPKPI1B+XxE1mNBdLdMEdfUSKwUqv3BGg8g+WsL+ZLkbSzrswuoyBKWioEVXkxUVDtRghDLDjiRFjyQMwD+MhvdoC46a10IMkz1G5kKkQ6xaTTwhkEsh2iGeWtn6WDcC0PILFX4NmiF/g650j41aFWAyOD5ULBKV04a2dYKdadGfaAH0=\",\n    \"expires\": 1521648936739,\n    \"otpdeliveryType\": null,\n    \"time\": 1521648060983\n}\n```\n### Select Authenticator (Second-factor)\nThe next step is to send a POST request to use a specific second-factor authentication. It must be sent to a URL with PASSWORD_AND_SECONDFACTOR at the end of it. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/authentication/users/authenticate/PASSWORD_AND_SECONDFACTOR\n```\nThe body of this request should contain a JSON object with the ID of the application being accessed, the token that was received from the last request, and a second-factor authenticator. All the available second-factor authenticator options were received in the first call we made. For example:\n```\n{\n    \"applicationId\":\"1111111-111111-111111-11111111\",\n    \"secondFactorAuthenticator\":\"OTP\",\n    \"authToken\":\"GO7mOyRuLzfTOXLk/IbzsDEuw8cFQspxz8TCWRwcrrhtoBw/o7udXt94eTkbkDFcbMVpfqHZJcJ4vavS4MEN6wp0d7MFhd0n9A9XymY5KHKyMvrqJlqh8+NrIZjkiA0sZvrAhu+6IRGfTYfoe/DwWclJi2JNNxpMX/17b7QHZdrj5ItbJUp3wHhAswUX02uWn/Fxwnt3cxGVHgmtTaVfz42JBkiIeRcOiv81iJqfTuSrd+S29RqO4PCKYGw1pKhymottvV3eVGNxdPvwSrLgXusfuCyfAB8tGl047WJQOKaHZ7k4GbzC1QKjldNWHrMAtiLUMWaxgvpU/vANJUibIPXJ6+1i7X7U6THJJg4fBG+pJo8jPKPI1B+XxE1mNBdLdMEdfUSKwUqv3BGg8g+WsL+ZLkbSzrswuoyBKWioEVXkxUVDtRghDLDjiRFjyQMwD+MhvdoC46a10IMkz1G5kKkQ6xaTTwhkEsh2iGeWtn6WDcC0PILFX4NmiF/g650j41aFWAyOD5ULBKV04a2dYKdadGfaAH0=\"\n}\n```\nAn API response is received after entering the request. For example:\n```\n{\n    \"status\": null,\n    \"firstName\": null,\n    \"lastName\": null,\n    \"authenticationCompleted\": false,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": {\n        \"machineAuthenticatorEnabled\": true,\n        \"deviceFingerprintRequired\": false,\n        \"attributeExclusions\": [],\n        \"userMachineAuthenticators\": []\n    },\n    \"kbaChallenge\": null,\n    \"token\": \"GMITwEPkGILJI/jBMVT3p8a09JtGag3AzXqjan1+FBNdWjnCi16JNdpNxrBt/iuFYlozZ2Jrf6V6JEZEuQeFtZtFyETEVKNOxhbbOf+u6SmkBSwLQQm529WKUtFssLnQ9Mliojlb/1W8VXkseazUhWuvpab9t7b4Y9BP9RcXdPNdAOtR++dGwuwtAh0O6Edq9SE4yDGn8aRWJuydc7k8aQymLZfFR76y0EbG4mP/m9kZ2pDOjUrhHa8rToLLx3Jr70aHqJr5bNyCrQ96/c+5YTQeLhFL86Ch8LcIAKHh5RI2Ma6X+PTBZ4CwMrU6jUczCjJ6m94jlwIH37P0vv2GdlMZHPqjjmAuHB2SGKA0UxQywL9SbsIhyM2lxhBLUK30wRH0LHlW4reki0vF9gfc+kZQZFaVyj/bJ0P63lTsIywEmPBbCo8o21A5Mram5m+kNcCLg4ZlIaM2bWrvtBX0SxL5Cpx7vy1cUABQw+4ifRgcrwt6KWgIngmu1y/ItwaLCGgvw2dCFd3kPHd+HoXzsb2aVP+9tqo=\",\n    \"expires\": 1521648936739,\n    \"otpdeliveryType\": \"SMS\",\n    \"time\": 1521648184761\n}\n```\nThe token received in this request would be used to complete the second-factor authentication in the next step.\n\n### Complete authentication challenge (Second-factor)\nThe last step is to send a POST request to complete the second-factor authentication challenge. It must be sent to a URL with PASSWORD_AND_SECONDFACTOR at the end of it. For example:\n```\nhttps://customer.region.trustedauth.com/api/web/v1/authentication/users/authenticate/PASSWORD_AND_SECONDFACTOR/complete\n```\nAs in the first example, this request will also include an Authorization header field.\n\nThe body of this request should contain a JSON object with the second factor response, the ID of the application being accessed, and the second factor authenticator being used. For example:\n```\n{\n   \"applicationId\":\"1111111-111111-111111-11111111\",\n   \"response\":\"123456789\",\n   \"secondFactorAuthenticator\":\"OTP\"\n}\n```\nAn API response is received after entering the request. For example:\n```\n{\n    \"status\": null,\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"authenticationCompleted\": true,\n    \"machineAuthenticator\": null,\n    \"userMachineSettings\": null,\n    \"kbaChallenge\": null,\n    \"token\": \"GENw36RGssBDAmU8UgULDBFGp2cG6aWDO0dWUQU24QyAIDo2KFzfr62MEymgHxlU17EkLPknUUCwXm/azikw04oG2qniwwZVlXghQBFoME3DvenPMCXobOeqRqyDOeLbfLWIXdlNK2jJFIpPcTQqe3puKlAis3VfwltcOgmnQTK2ZnQA6dOICTKa0Kfr+fvUg0fmdBJ8asvryswSdeNjw2ndO638uZYhYks+2QstKxTuHXsslECPPgxa1CCidWm3EDigpH2SJQ9W1FY06zq/8BQMu3sxivWGOtd1p7xg2LldXb0dnoeztI7OQSye/8NbBuzWOdGOrwTIlOSd6mECcsdMQadstzQLoAtdRCsYW0JDVhvaaNjg2l5l7d3Tte20AXKUAKLA4NTpDZSz8N74A7me1pDV5GUXY5BdhwQGqIKtwpQvzt5uv9W/inomGdr+RO9KZGOV4Nfvilqr2yxoo0HfWkNvcsqtUXrHYN4chauqTYB7vqBBQzvhK/ar7lXg4WAjbqAOUvJXhSpuG92dltNRC9TsttUyFZ4RljhyPAyh2MNevhnEIq/jd34BhYmGyUFyshrYQE/fRTI5UvGrSybUX9IJN8dpKua64GhOspO4\",\n    \"expires\": 1521648936739,\n    \"otpdeliveryType\": null,\n    \"time\": 1521648223398\n}\n```\nThis response would indicate **authenticationCompleted** as true. This indicates that two-factor authentication was successful.\n# How risk based authentication (RBA) and authentication APIs work together\n\nRisk-based authentication (RBA) identifies the level of risk associated with each authentication request. Once the risk level is identified, RBA defines the level of authentication required to authenticate.\n\nAn authentication request consists of three API calls (as described above):\n\n - Get User's Authenticators\n - Select Authenticator  \n - Complete Authentication Challenge\n\nAs part of figuring out what authentications are available and required, each application's resource rule uses RBA to determine the request's risk level.  The risk levels possible are low, medium, and high. The risk level of the request defines which authenticators can be used. The following factors are considered when determining the request's risk level:\n\n 1. Date and time of request\n 2. Location of request\n 3. Source IP address of request origin\n 4. Machine Authentication (described in the next section)\n 5. Location history of authentication requests received\n 6. Travel velocity of authentication requests received\n\n## Machine Authentication\n\nMachine authentication is one of the factors used to evaluate each request's risk. Entrust Datacard recommends downloading the Entrust IdentityGuard Device Fingerprint SDKs from TrustedCare for machine authentication. The SDK collects the device fingerprint and includes it as part of the machine authentication.  \n\nThe risk condition generates a risk score by completing the following steps:\n1. The IntelliTrust user's Web Browser assigned the Machine Authenticator generates a machine secret. It includes these components:\n\t - Machine nonce: A value generated when the machine authenticator is registered and stored by the client.\n\t - Sequence nonce: Another value generated in a previous authentication attempt that is stored by the client.  Unlike a machine nonce, the sequence nonce is modified every time an authentication API call is made.\n\t - Device fingerprint â€“ A value collected from the client device.\n\n2. The machine secret is submitted to IntelliTrust in the query request.\n\n3. The machine secret is compared to machine secrets from previous authentication requests to determine a risk level.\n\n4. At the end of a successful authentication, a machine nonce and sequence nonce may be returned to the client. In that case, the client should store these values for future authentication attempts.\n\nBelow are example use cases for Machine Authentication:\n-\tAuthentication from a new Web Browser that normally requires two factor authentication. A resource rule could be configured to allow users to log by only completing a single-factor authentication if a valid Machine Authenticator is detected.\n-\tAuthentication from a previously-used machine that normally only requires password authentication. The application's resource rule would need to be customized to support Machine Authentication. For example, a resource rule would be customized as follows to consider Machine Authentication and only require password authentication:\n\t-\tCustomize the risk score assigned to users who do not have a Machine Authenticator\n\t-\tCustomize the risk assigned to users who do have a Machine Authenticator\n\t-\tSet low risk authentication to **PASSWORD + NONE**\n\t-\tMedium risk authentication to **PASSWORD + OTP**\n\n## EXTERNAL plus Second-factor authentication\nIn this type of authentication, a client has already completed the first factor authentication outside of IntelliTrust and uses IntelliTrust to determine if second-factor authentication is necessary.\n\nThis section describes how to use the IntelliTrust's Authentication APIs to complete, if required, second-factor authentication.\nThe API calls required are similar to those required for single-factor authentication:\n\n 1. Get User's Authenticators\n 2. Complete EXTERNAL Authentication (the result indicates if second-factor is required)\n 3. Select Authenticator (Second-factor)\n 4. Complete Authentication Challenge (Second-factor)\n \nNotes:\n-\tIf the Authentication API application is configured such that the client doesn't require to perform second-factor authentication, the client will receive an authenticated JWT in step 2.\n-\tTo use some of the risk conditions, the client IP address must be made available to IntelliTrust in all requests. You define the source of the client IP address when the Authentication API application is created.  The examples below assume that you selected **Provided in the API**.\n\n ### Get User's Authenticators\n\n The first step is to submit a POST request to get all of the authenticators that can be used. For example:\n ```\n https://customer.region.trustedauth.com/api/web/v2/authentication/users\n ```\n The body of this request should contain a JSON object with User ID (containing the user id or a user alias value) and the ID of the Authentication API application being accessed. For example:\n ```\n {\"userId\":\"jsmith\", \"applicationId\":\"1111111-111111-111111-11111111\", \"clientIp\": \"1.2.3.4\"}\n ```\n A response with a JSON object to the API request is received. The response includes the **authenticationTypes** attribute marked as **EXTERNAL**. It also includes the **availableSecondFactor** attribute showing all the authenticators that can be used for second-factor authentication. For example:\n ```\n {\n     \"availableSecondFactor\": [\n         \"TOKENPUSH\",\n         \"TOKEN\",\n         \"OTP\"\n     ],\n     \"userMachineSettings\": {\n         \"machineAuthenticatorEnabled\": true,\n         \"deviceFingerprintRequired\": false,\n         \"attributeExclusions\": [],\n         \"userMachineAuthenticators\": []\n     },\n     \"machineAuthenticator\": null,\n     \"authenticationTypes\": [\n         \"EXTERNAL\"\n     ],\n     \"time\": 1521647783740,\n     \"otpDeliveryInfo\": {\n         \"otpDefaultDelivery\": \"SMS\",\n         \"availableOTPDelivery\": [\n             \"SMS\",\n             \"EMAIL\",\n             \"VOICE\"\n         ]\n     }\n }\n ```\n\n ### Complete first-factor authentication\n The next step is to complete the first-factor EXTERNAL authentication to determine if second-factor authentication is required. A POST request to complete the EXTERNAL authentication challenge would be sent to the following URL:\n ```\n https://customer.region.trustedauth.com/api/web/v1/authentication/users/authenticate/EXTERNAL/complete\n ```\n As in the first example, this request will also include an Authorization header field.\n\n The body of this request should contain a JSON object with the ID of the API application being accessed. For example:\n ```\n {\"applicationId\":\"1111111-111111-111111-11111111\", \"clientIp\": \"1.2.3.4\"}\n ```\n The response received from this request would include a new token and the **authenticationCompleted** attribute that would be marked as false. For example:\n ```\n {\n     \"status\": null,\n     \"firstName\": null,\n     \"lastName\": null,\n     \"authenticationCompleted\": false,\n     \"machineAuthenticator\": null,\n     \"userMachineSettings\": {\n         \"machineAuthenticatorEnabled\": true,\n         \"deviceFingerprintRequired\": false,\n         \"attributeExclusions\": [],\n         \"userMachineAuthenticators\": []\n     },\n     \"kbaChallenge\": null,\n     \"token\": \"GO7mOyRuLzfTOXLk/IbzsDEuw8cFQspxz8TCWRwcrrhtoBw/o7udXt94eTkbkDFcbMVpfqHZJcJ4vavS4MEN6wp0d7MFhd0n9A9XymY5KHKyMvrqJlqh8+NrIZjkiA0sZvrAhu+6IRGfTYfoe/DwWclJi2JNNxpMX/17b7QHZdrj5ItbJUp3wHhAswUX02uWn/Fxwnt3cxGVHgmtTaVfz42JBkiIeRcOiv81iJqfTuSrd+S29RqO4PCKYGw1pKhymottvV3eVGNxdPvwSrLgXusfuCyfAB8tGl047WJQOKaHZ7k4GbzC1QKjldNWHrMAtiLUMWaxgvpU/vANJUibIPXJ6+1i7X7U6THJJg4fBG+pJo8jPKPI1B+XxE1mNBdLdMEdfUSKwUqv3BGg8g+WsL+ZLkbSzrswuoyBKWioEVXkxUVDtRghDLDjiRFjyQMwD+MhvdoC46a10IMkz1G5kKkQ6xaTTwhkEsh2iGeWtn6WDcC0PILFX4NmiF/g650j41aFWAyOD5ULBKV04a2dYKdadGfaAH0=\",\n     \"expires\": 1521648936739,\n     \"otpdeliveryType\": null,\n     \"time\": 1521648060983\n }\n ```\n If the Authentication API application is configured in a such a way that users with low risk score do not require to perform second-factor authentication, in this step the user would be authenticated and the response would set **authenticationCompleted** as true indicating that EXTERNAL plus second-factor authentication was successful.\n\n ### Select Authenticator (Second-factor)\n The next step is to send a POST request to use a specific second-factor authentication. All the available second-factor authenticator options were received in the first call we made. For example, with OTP, the request URL would be:\n ```\n https://customer.region.trustedauth.com/api/web/v2/authentication/users/authenticate/OTP\n ```\n The body of this request should contain a JSON object with the ID of the Authentication API application being accessed and the token that was received from the last request. For example:\n ```\n {\n     \"applicationId\":\"1111111-111111-111111-11111111\",\n     \"clientIp\": \"1.2.3.4\",\n     \"authToken\": \"GO7mOyRuLzfTOXLk/IbzsDEuw8cFQspxz8TCWRwcrrhtoBw/o7udXt94eTkbkDFcbMVpfqHZJcJ4vavS4MEN6wp0d7MFhd0n9A9XymY5KHKyMvrqJlqh8+NrIZjkiA0sZvrAhu+6IRGfTYfoe/DwWclJi2JNNxpMX/17b7QHZdrj5ItbJUp3wHhAswUX02uWn/Fxwnt3cxGVHgmtTaVfz42JBkiIeRcOiv81iJqfTuSrd+S29RqO4PCKYGw1pKhymottvV3eVGNxdPvwSrLgXusfuCyfAB8tGl047WJQOKaHZ7k4GbzC1QKjldNWHrMAtiLUMWaxgvpU/vANJUibIPXJ6+1i7X7U6THJJg4fBG+pJo8jPKPI1B+XxE1mNBdLdMEdfUSKwUqv3BGg8g+WsL+ZLkbSzrswuoyBKWioEVXkxUVDtRghDLDjiRFjyQMwD+MhvdoC46a10IMkz1G5kKkQ6xaTTwhkEsh2iGeWtn6WDcC0PILFX4NmiF/g650j41aFWAyOD5ULBKV04a2dYKdadGfaAH0=\"\n }\n ```\n An API response is received after submitting the request. For example:\n ```\n {\n     \"status\": null,\n     \"firstName\": null,\n     \"lastName\": null,\n     \"authenticationCompleted\": false,\n     \"machineAuthenticator\": null,\n     \"userMachineSettings\": {\n         \"machineAuthenticatorEnabled\": true,\n         \"deviceFingerprintRequired\": false,\n         \"attributeExclusions\": [],\n         \"userMachineAuthenticators\": []\n     },\n     \"kbaChallenge\": null,\n     \"token\": \"GMITwEPkGILJI/jBMVT3p8a09JtGag3AzXqjan1+FBNdWjnCi16JNdpNxrBt/iuFYlozZ2Jrf6V6JEZEuQeFtZtFyETEVKNOxhbbOf+u6SmkBSwLQQm529WKUtFssLnQ9Mliojlb/1W8VXkseazUhWuvpab9t7b4Y9BP9RcXdPNdAOtR++dGwuwtAh0O6Edq9SE4yDGn8aRWJuydc7k8aQymLZfFR76y0EbG4mP/m9kZ2pDOjUrhHa8rToLLx3Jr70aHqJr5bNyCrQ96/c+5YTQeLhFL86Ch8LcIAKHh5RI2Ma6X+PTBZ4CwMrU6jUczCjJ6m94jlwIH37P0vv2GdlMZHPqjjmAuHB2SGKA0UxQywL9SbsIhyM2lxhBLUK30wRH0LHlW4reki0vF9gfc+kZQZFaVyj/bJ0P63lTsIywEmPBbCo8o21A5Mram5m+kNcCLg4ZlIaM2bWrvtBX0SxL5Cpx7vy1cUABQw+4ifRgcrwt6KWgIngmu1y/ItwaLCGgvw2dCFd3kPHd+HoXzsb2aVP+9tqo=\",\n     \"expires\": 1521648936739,\n     \"otpdeliveryType\": \"SMS\",\n     \"time\": 1521648184761\n }\n ```\n The token received in this request would be used to complete the second-factor authentication in the next step.\n\n ### Complete authentication challenge (Second-factor)\n The last step is to send a POST request to complete the second-factor authentication challenge. For example:\n ```\n https://customer.region.trustedauth.com/api/web/v1/authentication/users/authenticate/OTP/complete\n ```\n As in the first example, this request will also include an Authorization header field.\n\n The body of this request should contain a JSON object with the second-factor response, the ID of the application being accessed, and the second-factor authenticator being used. For example:\n ```\n {\n    \"applicationId\": \"1111111-111111-111111-11111111\",\n    \"response\": \"123456789\",\n    \"clientIp\": \"1.2.3.4\"\n }\n ```\n An API response is received after submitting the request. For example:\n ```\n {\n     \"status\": null,\n     \"firstName\": \"John\",\n     \"lastName\": \"Smith\",\n     \"authenticationCompleted\": true,\n     \"machineAuthenticator\": null,\n     \"userMachineSettings\": null,\n     \"kbaChallenge\": null,\n     \"token\": \"GENw36RGssBDAmU8UgULDBFGp2cG6aWDO0dWUQU24QyAIDo2KFzfr62MEymgHxlU17EkLPknUUCwXm/azikw04oG2qniwwZVlXghQBFoME3DvenPMCXobOeqRqyDOeLbfLWIXdlNK2jJFIpPcTQqe3puKlAis3VfwltcOgmnQTK2ZnQA6dOICTKa0Kfr+fvUg0fmdBJ8asvryswSdeNjw2ndO638uZYhYks+2QstKxTuHXsslECPPgxa1CCidWm3EDigpH2SJQ9W1FY06zq/8BQMu3sxivWGOtd1p7xg2LldXb0dnoeztI7OQSye/8NbBuzWOdGOrwTIlOSd6mECcsdMQadstzQLoAtdRCsYW0JDVhvaaNjg2l5l7d3Tte20AXKUAKLA4NTpDZSz8N74A7me1pDV5GUXY5BdhwQGqIKtwpQvzt5uv9W/inomGdr+RO9KZGOV4Nfvilqr2yxoo0HfWkNvcsqtUXrHYN4chauqTYB7vqBBQzvhK/ar7lXg4WAjbqAOUvJXhSpuG92dltNRC9TsttUyFZ4RljhyPAyh2MNevhnEIq/jd34BhYmGyUFyshrYQE/fRTI5UvGrSybUX9IJN8dpKua64GhOspO4\",\n     \"expires\": 1521648936739,\n     \"otpdeliveryType\": null,\n     \"time\": 1521648223398\n }\n ```\n This response would indicate **authenticationCompleted** as true. This indicates that two-factor authentication was successful.\n",
    "version": "5.6",
    "title": "Entrust Datacard IntelliTrust Authentication API",
    "contact": {
      "email": "support@entrustdatacard.com"
    },
    "license": {
      "name": "Copyright 2020 Entrust Datacard Limited Â© All rights reserved."
    },
    "x-logo": {
      "url": "edc.jpg"
    }
  },
  "host": "customer.region.trustedauth.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication controllers"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/web/v1/authentication/users/authenticate/{authenticator}/complete": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate User Challenge",
        "operationId": "userAuthenticateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "authenticator",
            "in": "path",
            "description": "authenticator",
            "required": true,
            "type": "string",
            "enum": [
              "MACHINE",
              "PASSWORD",
              "EXTERNAL",
              "KBA",
              "TEMP_ACCESS_CODE",
              "OTP",
              "GRID",
              "TOKEN",
              "TOKENPUSH",
              "FIDO",
              "SMARTCREDENTIALPUSH",
              "PASSWORD_AND_SECONDFACTOR"
            ]
          },
          {
            "in": "body",
            "name": "userAuthenticateParms",
            "description": "userAuthenticateParms",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAuthenticateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticators retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AuthenticatedResponse"
            }
          },
          "401": {
            "description": "Access denied",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/web/v2/authentication/users": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Query User Authenticators",
        "operationId": "userAuthenticatorQueryUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userQueryParms",
            "description": "userQueryParms",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAuthenticateQueryParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticators retrieved successfully",
            "schema": {
              "$ref": "#/definitions/UserAuthenticateQueryResponse"
            }
          },
          "401": {
            "description": "Access denied",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/web/v2/authentication/users/authenticate/{authenticator}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request User Challenge",
        "operationId": "userChallengeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authenticator",
            "in": "path",
            "description": "authenticator",
            "required": true,
            "type": "string",
            "enum": [
              "MACHINE",
              "PASSWORD",
              "EXTERNAL",
              "KBA",
              "TEMP_ACCESS_CODE",
              "OTP",
              "GRID",
              "TOKEN",
              "TOKENPUSH",
              "FIDO",
              "SMARTCREDENTIALPUSH",
              "PASSWORD_AND_SECONDFACTOR"
            ]
          },
          {
            "in": "body",
            "name": "userChallengeParms",
            "description": "userChallengeParms",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserChallengeParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticators retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AuthenticatedResponse"
            }
          },
          "401": {
            "description": "Access denied",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AuthenticatedResponse": {
      "type": "object",
      "properties": {
        "authenticationCompleted": {
          "type": "boolean",
          "description": "Flag to indicate if authentication has successfully completed."
        },
        "authenticatorResponse": {
          "type": "string",
          "format": "byte",
          "description": "The authenticator response for MSCHAPv2"
        },
        "expires": {
          "type": "integer",
          "format": "int64"
        },
        "fidoChallenge": {
          "$ref": "#/definitions/FIDOChallenge"
        },
        "firstName": {
          "type": "string",
          "description": "First Name."
        },
        "gridChallenge": {
          "description": "For a Grid authenticator challenge, provides the Grid challenge.",
          "$ref": "#/definitions/GridChallenge"
        },
        "kbaChallenge": {
          "description": "For a KBA authenticator challenge, provides the KBA challenge.",
          "$ref": "#/definitions/KbaChallenge"
        },
        "lastName": {
          "type": "string",
          "description": "Last Name."
        },
        "machineAuthenticator": {
          "description": "Machine Authenticator.",
          "$ref": "#/definitions/MachineAuthenticator"
        },
        "offlineTokenResponses": {
          "description": "Offline token response",
          "$ref": "#/definitions/OfflineTokenAuthenticateResponse"
        },
        "otpdeliveryType": {
          "type": "string",
          "description": "Lists all OTP delivery types available.",
          "enum": [
            "EMAIL",
            "SMS",
            "VOICE"
          ]
        },
        "status": {
          "type": "string",
          "description": "Status of authenticator. This is not a required API field if Mobile Smart Credential or Token Push authentication is being used.",
          "enum": [
            "CONFIRM",
            "CONCERN",
            "CANCEL",
            "NO_RESPONSE"
          ]
        },
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "token": {
          "type": "string",
          "description": "Authenticated/unauthenticated authorization token."
        },
        "tokenDetails": {
          "type": "array",
          "description": "For a token or token push authenticator challenge, provides a list of serial numbers of the tokens that can be used to authenticate.",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string",
          "description": "User ID of IntelliTrust user after completing authentication."
        },
        "userMachineSettings": {
          "description": "Lists all the settings configured for users machine.",
          "$ref": "#/definitions/UserMachineSettings"
        }
      },
      "title": "AuthenticatedResponse",
      "description": "Response associated with an authentication request."
    },
    "CHAPResponse": {
      "type": "object",
      "title": "CHAPResponse"
    },
    "ErrorInfo": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "example": "invalid_user_response",
          "description": "Error Codes specific to cause of failure."
        },
        "errorMessage": {
          "type": "string",
          "example": "Application id cannot be null",
          "description": "Additional Error Message describing the error."
        },
        "parameters": {
          "type": "array",
          "description": "Optional additional error information.",
          "items": {
            "type": "object"
          }
        }
      },
      "title": "ErrorInfo",
      "description": "Object containing information about errors reported by services."
    },
    "FIDOChallenge": {
      "type": "object",
      "properties": {
        "allowCredentials": {
          "type": "array",
          "description": "The list of IDs of the FIDO tokens registered for the user. Each value is base-64 encoded.",
          "items": {
            "type": "string"
          }
        },
        "challenge": {
          "type": "string",
          "description": "A random challenge. It is a base-64 encoded value."
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "The number of seconds that the client will wait for the FIDO token to respond."
        }
      },
      "title": "FIDOChallenge",
      "description": "If the authentication challenge is of type FIDO, the FIDOChallenge will contain the FIDO challenge parameters that must be passed to the FIDO token to complete authentication."
    },
    "FIDOResponse": {
      "type": "object",
      "properties": {
        "authenticatorData": {
          "type": "string",
          "description": "Authenticator Data returned from the token."
        },
        "clientDataJSON": {
          "type": "string",
          "description": "Data about the token used to authenticate."
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the token used to authenticate."
        },
        "signature": {
          "type": "string",
          "description": "The authentication signature generated by the token."
        }
      },
      "title": "FIDOResponse",
      "description": "The values returned from a FIDO token when performing an authentication."
    },
    "GridChallenge": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "array",
          "description": "The grid challenge specifies a list of grid cells that the user must answer in their challenge.",
          "items": {
            "$ref": "#/definitions/GridChallengeCell"
          }
        },
        "numCharsPerCell": {
          "type": "integer",
          "format": "int32",
          "description": "The numCharsPerCell value specifies the number of characters expected in the response for each cell as defined by current settings."
        },
        "serialNumbers": {
          "type": "array",
          "description": "The serial numbers of the grids that can be used to answer this challenge.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "GridChallenge",
      "description": "If the authentication challenge is of type grid, the GridChallenge object will contain the grid challenge that the end user must answer."
    },
    "GridChallengeCell": {
      "type": "object",
      "properties": {
        "column": {
          "type": "integer",
          "format": "int32",
          "description": "The column within the grid starting at 0."
        },
        "row": {
          "type": "integer",
          "format": "int32",
          "description": "The row within the grid starting at 0."
        }
      },
      "title": "GridChallengeCell",
      "description": "A GridChallengeCell specifies one cell in a grid by its row and column coordinates.  Normally a grid challenge cell is displayed using letters for the column and numbers for the row.  For example, a cell with the value 0,0 will be displayed as A1."
    },
    "KbaChallenge": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userQuestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserQuestion"
          }
        }
      },
      "title": "KbaChallenge",
      "description": "Knowledge-based authenticator required for IntelliTrust authentication"
    },
    "MSCHAPv1Response": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "string",
          "format": "byte",
          "description": "The MSCHAPv1 challenge."
        },
        "response": {
          "type": "string",
          "format": "byte",
          "description": "The MSCHAPv1 response."
        }
      },
      "title": "MSCHAPv1Response",
      "description": "A MSCHAPv1Response specifies the values included in an MSCHAPv1 encoded authentication response."
    },
    "MSCHAPv2Response": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "string",
          "format": "byte",
          "description": "The MSCHAPv2 challenge."
        },
        "identifier": {
          "type": "integer",
          "format": "int32",
          "description": "The MSCHAPv2 identifier.",
          "minimum": -128,
          "maximum": 127
        },
        "peerChallenge": {
          "type": "string",
          "format": "byte",
          "description": "The MSCHAPv2 peer challenge."
        },
        "response": {
          "type": "string",
          "format": "byte",
          "description": "The MSCHAPv2 response."
        },
        "userId": {
          "type": "string",
          "description": "The MSCHAPv2 userId.  This must be the exact same value used to calculate the MSCHAPv2 response. It will normally be the same as the userId value passed to the authentication method but allows for differences between the two values. For example, an alias may have been passed to the authentication method but the actual userid was used to calculate the MSCHAPv2 response."
        }
      },
      "title": "MSCHAPv2Response",
      "description": "A MSCHAPv2Response specifies the values included in an MSCHAPv2 encoded authentication response."
    },
    "MachineAuthenticator": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string"
        },
        "machineNonce": {
          "type": "string"
        },
        "sequenceNonce": {
          "type": "string"
        }
      },
      "title": "MachineAuthenticator",
      "description": "Machine authenticator required to complete authentication challenge"
    },
    "MachineAuthenticatorRegistration": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "title": "MachineAuthenticatorRegistration",
      "description": "Register a machine authenticator for IntelliTrust authentication"
    },
    "OTPDetails": {
      "type": "object",
      "properties": {
        "availableOTPDelivery": {
          "type": "array",
          "description": "The available delivery types.",
          "items": {
            "type": "string",
            "enum": [
              "EMAIL",
              "SMS",
              "VOICE"
            ]
          }
        },
        "otpDefaultDelivery": {
          "type": "string",
          "description": "The default delivery type.",
          "enum": [
            "EMAIL",
            "SMS",
            "VOICE"
          ]
        }
      },
      "title": "OTPDetails"
    },
    "OfflineTokenAuthenticateResponse": {
      "type": "object",
      "properties": {
        "firstMovingFactor": {
          "type": "integer",
          "format": "int64",
          "description": "This is the moving factor index for the first hashed OTP returned. In the case of time-based tokens, it represents time step, otherwise it represents the value of the counter."
        },
        "iterations": {
          "type": "integer",
          "format": "int32",
          "description": "The number of iterations of the hash function to be performed."
        },
        "maxSizeInUnits": {
          "type": "integer",
          "format": "int32",
          "description": "This is the policy-configured maximum number (hours or counters)"
        },
        "maxTimeSteps": {
          "type": "integer",
          "format": "int32",
          "description": "This is the max number of time steps used to validate a token."
        },
        "minorSizeInUnits": {
          "type": "integer",
          "format": "int32",
          "description": "This is the policy-configured recommended number (hours or counters)"
        },
        "otps": {
          "type": "string",
          "description": "An array of all of the OTPs returned in the batch, each with its public component of the salt."
        },
        "privateSaltLength": {
          "type": "integer",
          "format": "int32",
          "description": "The number of digits in the private part of the salt that the client must guess."
        },
        "resultOptimized": {
          "type": "boolean",
          "description": "Flag indicating if the set of OTP hashes returned was optimized so that OTPs which have already been downloaded in prior requests, but that have no yet expired, are not sent again."
        },
        "timeDrift": {
          "type": "integer",
          "format": "int32",
          "description": "This is the token time drift in seconds. This applies only to time-based tokens."
        },
        "timeInterval": {
          "type": "integer",
          "format": "int32",
          "description": "If this contains a positive value then this batch is for time-based tokens, otherwise it is for event based tokens."
        },
        "tokenSerialNumber": {
          "type": "string",
          "description": "The serial number of the token for which offline tokens are generated."
        },
        "useSecret": {
          "type": "string",
          "format": "byte",
          "description": "The secret the client should use when requesting the next batch of protected offline OTPs."
        }
      },
      "title": "OfflineTokenAuthenticateResponse",
      "description": "Used to return batches of protected OTPs for a given token"
    },
    "RequestDetail": {
      "type": "object",
      "properties": {
        "browser": {
          "type": "string",
          "example": "Chrome 67.0.3396.99",
          "description": "The browser associated with the request."
        },
        "os": {
          "type": "string",
          "example": "Windows 8.1",
          "description": "The OS associated with the request."
        }
      },
      "title": "RequestDetail",
      "description": "Request detail items."
    },
    "TokenProtectedOfflineParms": {
      "type": "object",
      "properties": {
        "tokenProtectedOfflineOTPClientName": {
          "type": "string",
          "description": "The name sent by the client."
        },
        "tokenProtectedOfflineOTPClientSecret": {
          "type": "string",
          "format": "byte",
          "description": "One or several secrets sent by the client concatenated to a single array."
        },
        "tokenProtectedOfflineOTPDoNotOptimize": {
          "type": "boolean",
          "description": "Flag indicating whether the number of OTPs being returned need to be optimized."
        },
        "tokenProtectedOfflineOTPGet": {
          "type": "string",
          "description": "The different levels of protection for offline tokens.",
          "enum": [
            "NONE",
            "MINOR",
            "MAJOR",
            "CUSTOM"
          ]
        },
        "tokenProtectedOfflineOTPSize": {
          "type": "integer",
          "format": "int32",
          "description": "Request size (Units of hour or count)."
        }
      },
      "title": "TokenProtectedOfflineParms",
      "description": "The model used to generate the offline token."
    },
    "TransactionDetail": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "string",
          "example": "Amount",
          "description": "The transaction detail name."
        },
        "value": {
          "type": "string",
          "example": "$10,001",
          "description": "The transaction detail value."
        }
      },
      "title": "TransactionDetail",
      "description": "Transaction detail item and its value used with push authenticators."
    },
    "UserAuthenticateParameters": {
      "type": "object",
      "required": [
        "applicationId"
      ],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "6781549d-433c-44ea-a42f-4705c26f3245.",
          "description": "Unique identifier of IntelliTrust authentication API application."
        },
        "cancel": {
          "type": "boolean",
          "example": false,
          "description": "Cancel IntelliTrust authentication to the application"
        },
        "chapResponse": {
          "description": "CHAP Response if you client is using CHAP.",
          "$ref": "#/definitions/CHAPResponse"
        },
        "clientIp": {
          "type": "string",
          "description": "Provided client IP address."
        },
        "enableWebSession": {
          "type": "boolean",
          "example": false,
          "description": "If set to true, enhanced session protection is enabled for the auth token. An HTTP cookie named INTELLITRUST_SESSION_ID is returned with the response and must be returned in all subsequent requests using the auth token."
        },
        "fidoResponse": {
          "$ref": "#/definitions/FIDOResponse"
        },
        "kbaChallenge": {
          "description": "For KBA authentication the original KBA challenge.",
          "$ref": "#/definitions/KbaChallenge"
        },
        "machineAuthenticator": {
          "description": "Machine Authenticator.",
          "$ref": "#/definitions/MachineAuthenticator"
        },
        "machineAuthenticatorRegistration": {
          "$ref": "#/definitions/MachineAuthenticatorRegistration"
        },
        "mschapV1Response": {
          "description": "MSCHAP v1 Response if you client is using MSCHAP v1.",
          "$ref": "#/definitions/MSCHAPv1Response"
        },
        "mschapV2Response": {
          "description": "MSCHAP v2 Response if you client is using MSCHAP v2.",
          "$ref": "#/definitions/MSCHAPv2Response"
        },
        "newPassword": {
          "type": "string",
          "description": "New password if change requested."
        },
        "response": {
          "type": "string",
          "example": "7569582.",
          "description": "API response based on Authenticator type. This is not a required field if Mobile Smart Credential,KBA or Token Push authentication is being used."
        },
        "secondFactorAuthenticator": {
          "type": "string",
          "example": "OTP.",
          "description": "Authenticator type selected for second factor (if enabled).",
          "enum": [
            "MACHINE",
            "PASSWORD",
            "EXTERNAL",
            "KBA",
            "TEMP_ACCESS_CODE",
            "OTP",
            "GRID",
            "TOKEN",
            "TOKENPUSH",
            "FIDO",
            "SMARTCREDENTIALPUSH",
            "PASSWORD_AND_SECONDFACTOR"
          ]
        },
        "tokenProtectedOfflineParms": {
          "description": "The model used to generate the offline token.",
          "$ref": "#/definitions/TokenProtectedOfflineParms"
        },
        "transactionDetails": {
          "type": "array",
          "description": "Transaction Details.",
          "items": {
            "$ref": "#/definitions/TransactionDetail"
          }
        }
      },
      "title": "UserAuthenticateParameters",
      "description": "Request parameters for completing authentication process."
    },
    "UserAuthenticateQueryParameters": {
      "type": "object",
      "required": [
        "applicationId",
        "userId"
      ],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "6781549d-433c-44ea-a42f-4705c26f3245",
          "description": "Unique identifier of IntelliTrust authentication API application"
        },
        "clientIp": {
          "type": "string",
          "description": "Provided client IP address."
        },
        "machineAuthenticator": {
          "description": "Machine Authenticator.",
          "$ref": "#/definitions/MachineAuthenticator"
        },
        "userId": {
          "type": "string",
          "example": "user",
          "description": "User ID (containing the user id or a user alias value) of IntelliTrust user completing authentication challenge."
        }
      },
      "title": "UserAuthenticateQueryParameters",
      "description": "Request parameters for starting user authentication process."
    },
    "UserAuthenticateQueryResponse": {
      "type": "object",
      "properties": {
        "authenticationTypes": {
          "type": "array",
          "description": "List of authenticator types available for the user.",
          "items": {
            "type": "string",
            "enum": [
              "MACHINE",
              "PASSWORD",
              "EXTERNAL",
              "KBA",
              "TEMP_ACCESS_CODE",
              "OTP",
              "GRID",
              "TOKEN",
              "TOKENPUSH",
              "FIDO",
              "SMARTCREDENTIALPUSH",
              "PASSWORD_AND_SECONDFACTOR"
            ]
          }
        },
        "availableSecondFactor": {
          "type": "array",
          "description": "Lists authenticator types available to complete second factor challenge (if enabled).",
          "items": {
            "type": "string",
            "enum": [
              "MACHINE",
              "PASSWORD",
              "EXTERNAL",
              "KBA",
              "TEMP_ACCESS_CODE",
              "OTP",
              "GRID",
              "TOKEN",
              "TOKENPUSH",
              "FIDO",
              "SMARTCREDENTIALPUSH",
              "PASSWORD_AND_SECONDFACTOR"
            ]
          }
        },
        "machineAuthenticator": {
          "description": "Provides information about machine authenticator (if available).",
          "$ref": "#/definitions/MachineAuthenticator"
        },
        "otpDeliveryInfo": {
          "description": "The details about the OTP delivery method.",
          "$ref": "#/definitions/OTPDetails"
        },
        "passwordResetAllowed": {
          "type": "boolean",
          "description": "Flag to indicate if the user can initiate a password reset flow."
        },
        "registrationRequired": {
          "type": "boolean",
          "description": "Flag to indicate if the user has to register authenticators."
        },
        "supportsSignature": {
          "type": "boolean",
          "description": "Flag to indicate if the user has a token that supports signature."
        },
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "token": {
          "type": "string"
        },
        "userMachineSettings": {
          "description": "Lists all the settings configured for the user's machine.",
          "$ref": "#/definitions/UserMachineSettings"
        }
      },
      "title": "UserAuthenticateQueryResponse",
      "description": "Response associated with user authentication query."
    },
    "UserChallengeParameters": {
      "type": "object",
      "required": [
        "applicationId",
        "userId"
      ],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "6781549d-433c-44ea-a42f-4705c26f3245",
          "description": "Unique identifier of IntelliTrust authentication API application"
        },
        "authToken": {
          "type": "string",
          "description": "Authentication token (Required if the call to userQuery returned an authenticated token)."
        },
        "clientIp": {
          "type": "string",
          "description": "Provided client IP address."
        },
        "machineAuthenticator": {
          "description": "Machine Authenticator.",
          "$ref": "#/definitions/MachineAuthenticator"
        },
        "otpDeliveryType": {
          "type": "string",
          "example": "EMAIL/SMS/VOICE",
          "description": "Defines how a user receives their one-time passcode (Email, Text message (SMS), or Voice message (VOICE))",
          "enum": [
            "EMAIL",
            "SMS",
            "VOICE"
          ]
        },
        "requestDetail": {
          "description": "Request Detail.",
          "$ref": "#/definitions/RequestDetail"
        },
        "secondFactorAuthenticator": {
          "type": "string",
          "example": "OTP",
          "description": "Authenticator type selected for second factor (if enabled).",
          "enum": [
            "MACHINE",
            "PASSWORD",
            "EXTERNAL",
            "KBA",
            "TEMP_ACCESS_CODE",
            "OTP",
            "GRID",
            "TOKEN",
            "TOKENPUSH",
            "FIDO",
            "SMARTCREDENTIALPUSH",
            "PASSWORD_AND_SECONDFACTOR"
          ]
        },
        "summary": {
          "type": "string",
          "example": "You have requested to authenticate for a SAML Service Provider.",
          "description": "The push authentication challenge that appears in the user's mobile application."
        },
        "transactionDetails": {
          "type": "array",
          "description": "Transaction Details.",
          "items": {
            "$ref": "#/definitions/TransactionDetail"
          }
        },
        "userId": {
          "type": "string",
          "example": "admin",
          "description": "User ID (containing the user id or a user alias value) of IntelliTrust user completing authentication challenge."
        }
      },
      "title": "UserChallengeParameters",
      "description": "Request parameters for obtaining a challenge."
    },
    "UserMachineAuthenticator": {
      "type": "object",
      "properties": {
        "expiryTime": {
          "type": "string",
          "format": "date-time",
          "description": "When this machine secret expires in UTC time"
        },
        "id": {
          "type": "string",
          "description": "Identifies the device/machine"
        },
        "label": {
          "type": "string",
          "description": "Identifies the device/machine from the end-user point of view"
        },
        "lastUsedTime": {
          "type": "string",
          "format": "date-time",
          "description": "When this machine secret was last used"
        },
        "registrationTime": {
          "type": "string",
          "format": "date-time",
          "description": "When this machine secret was created in UTC time"
        }
      },
      "title": "UserMachineAuthenticator"
    },
    "UserMachineSettings": {
      "type": "object",
      "properties": {
        "attributeExclusions": {
          "type": "array",
          "description": "List of device fingerprinting attributes that should not be collected when a device fingerprint is captured.",
          "items": {
            "type": "string"
          }
        },
        "deviceFingerprintRequired": {
          "type": "boolean",
          "description": "Indicates whether a device fingerprint should be captured during machine registration or authentication"
        },
        "machineAuthenticatorEnabled": {
          "type": "boolean",
          "description": "machineAuthenticatorEnabled"
        },
        "userMachineAuthenticators": {
          "type": "array",
          "description": "List of Machine Authenticators that the user currently has--used to prevent duplicated labels.",
          "items": {
            "$ref": "#/definitions/UserMachineAuthenticator"
          }
        }
      },
      "title": "UserMachineSettings"
    },
    "UserQuestion": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "The question's answer."
        },
        "id": {
          "type": "string",
          "description": "The UUID of the KBA question/answer."
        },
        "question": {
          "type": "string",
          "description": "The question."
        }
      },
      "title": "UserQuestion",
      "description": "A KBA question/answer stored for a user."
    }
  }
}