import * as AdminSDK from "../admin-sdk";
import * as dotenv from "dotenv";

dotenv.config();

const basePath = process.env.BASE_PATH;

const credentials: AdminSDK.AdminApiAuthentication = {
  applicationId: process.env.ADMIN_APP_ID,
  sharedSecret: process.env.ADMIN_SECRET
};

describe("Administration API", () => {
  let sdk;

  beforeAll(() => {
    sdk = new AdminSDK.API({
      basePath
    });
  })

  it("should successfully call IntelliTrust", async () => {

    const authResponse = await sdk.authenticateAdminApiUsingPOST(credentials);

    expect(authResponse.status).toBe(200);

    const { authToken } = authResponse.data;

    sdk.setApiKey(authToken);

    const listResponse = await sdk.listAuthApiApplicationsUsingGET();

    expect(listResponse.status).toBe(200);
  });


  describe('IdProofing', () => {
    beforeEach( async () => {
      const authResponse = await sdk.authenticateAdminApiUsingPOST(credentials);
    
      const { authToken } = authResponse.data;
  
      sdk.setApiKey(authToken);
    })

  it("should successfully initiate an IDProofing Request", async () => {
  
      const idProofingResponse = await sdk.idProofingInitUsingPOST();
  
      expect(idProofingResponse.status).toBe(200);
  
    });

  it('should successfully upload an image', async () => {
      const image = ""

      const idProofingResponse = await sdk.idProofingInitUsingPOST();
        
      const imageResponse = await sdk.idProofingImageUsingPUT(idProofingResponse.data.requestId, 0, Buffer.from(image, 'base64'));        
        
      expect(imageResponse.status).toBe(200);
    });
  })
});
